[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ project_slug }}"
version = "0.1.0"
description = "Do a thing."
authors = [{ name = "D. Bohdan", email = "dbohdan@dbohdan.com" }]
requires-python = "~=3.10"
readme = "README.md"
license = { text = "Proprietary" }
# repository = "https://gitlab.com/dbohdan/{{ project_slug }}"
# keywords = [
#     "{{ project_slug }}",
# ]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Environment :: Console",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Utilities",
]

[project.scripts]
baz = "baz.main:main"

[dependency-groups]
dev = [
    "codespell>=2,<3",
    "pyright==1.1.331",
    "pytest>=8,<9",
    "pytest-cov>=4.1.0,<5",
    "ruff==0.2.1",
    "shiv>=1.0.4,<2",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "scripts/",
    "tox.ini",
    "tests/",
]

[tool.hatch.build.targets.wheel]
include = ["src/baz"]

[tool.hatch.build.targets.wheel.sources]
"src/baz" = "baz"

[tool.codespell]
quiet-level = 3

[tool.poe.env]
"PYTHON_SOURCES" = "scripts/ src/ tests/"

[tool.poe.tasks."{{ package_name }}"]
cmd = 'python -m "{{ package_name }}"'
help = "Run {{ package_name }}"

[tool.poe.tasks.check]
sequence = ["format", "lint", "spell", "type"]
help = "Run the formatter, then all static checks"
ignore_fail = "return_non_zero"

[tool.poe.tasks.files]
script = "scripts.tasks:files"
help = "List the individual files and files in packages used for static checks"

[tool.poe.tasks.format]
cmd = "ruff format ${PYTHON_SOURCES}"
help = "Run the Ruff formatter"

[tool.poe.tasks.lint]
cmd = "ruff check ${PYTHON_SOURCES}"
help = "Run Ruff"

[tool.poe.tasks.spell]
cmd = "codespell ${PYTHON_SOURCES}"
help = "Run codespell"

[tool.poe.tasks.test]
cmd = "pytest"
help = "Run Pytest (not through tox)"

[tool.poe.tasks.type]
cmd = "pyright ${PYTHON_SOURCES}"
help = "Run Pyright"

[tool.poe.tasks.zipapp]
cmd = "shiv --console-script {{ package_name }} --output-file {{ package_name }}.pyz ."
help = "Run shiv"

[tool.pyright]
pythonVersion = "3.10"

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "AIR",   # Airflow
    # "ANN", # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    # "CPY", # flake8-copyright
    "DJ",    # flake8-django
    # "D",   # pydocstyle
    "DTZ",   # flake8-datetimez
    "EM",    # flake8-errmsg
    "ERA",   # eradicate
    "E",     # pycodestyle
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "F",     # Pyflakes
    "G",     # flake8-logging-format
    "ICN",   # flake8-import-conventions
    "I",     # isort
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # Perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]
ignore = [
    "COM812", # missing-trailing-comma
    "ISC001", # single-line-implicit-string-concatenation
    "PGH003", # blanket-type-ignore
]

[tool.ruff.lint.per-file-ignores]
"tasks.py" = [
    "FBT001", # boolean-type-hint-positional-argument
    "FBT002", # boolean-default-value-positional-argument
    "S603",   # subprocess-without-shell-equals-true
    "S607",   # start-process-with-partial-path
    "T201",   # print
]
"tests/*.py" = [
    "PLR2004", # magic-value-comparison
    "S101",    # assert
]

[tool.ruff.lint.mccabe]
max-complexity = 21

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 20
max-statements = 100

[tool.uv]
